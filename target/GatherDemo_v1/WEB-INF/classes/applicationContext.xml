<?xml version="1.0" encoding="UTF-8"?>    
<beans xmlns="http://www.springframework.org/schema/beans"    
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"   
    xmlns:p="http://www.springframework.org/schema/p"  
    xmlns:aop="http://www.springframework.org/schema/aop"   
    xmlns:context="http://www.springframework.org/schema/context"  
    xmlns:jee="http://www.springframework.org/schema/jee"  
    xmlns:tx="http://www.springframework.org/schema/tx"  
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xsi:schemaLocation="    
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd  
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd  
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd  
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">
	
	  <context:annotation-config />
	  <!-- 使用注解的包，包括子集 -->
	  <context:component-scan base-package="com.web.core.svc" />
	
	  <!-- 获取数据库连接信息 -->
	  <context:property-placeholder location="classpath:database.properties" />
	  
	  <!-- 定义数据源 -->
	  <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
	    <property name="driverClassName" value="${jdbc.driverClassName}"></property>
	    <property name="url" value="${jdbc.url}"></property>
	    <property name="username" value="${jdbc.username}"></property>
	    <property name="password" value="${jdbc.password}"></property>
	  </bean>
	  
	  <!-- 配置mybatis的sqlSessionFactory -->
	  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
	  	<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mappers.xml文件 -->
		<property name="mapperLocations">
			<list>
				<value>classpath:com/mapper/**/*.xml</value>
			</list>
		</property>
		<!-- mybatis配置文件 -->
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
	  </bean>
	  
	  <!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.web.core.dao" />
		<!-- <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" /> -->
	  </bean>
	  
	  <!-- 通用mapper配置 -->
	  <!-- 自动扫描Mapper接口生成代理类，这里和上面搜索dao不冲突 -->
	  <bean class="tk.mybatis.spring.mapper.MapperScannerConfigurer">
	  	<property name="basePackage" value="com.web.core.dao" />
	  	<!-- 只有继承了NetStarDao的接口才自动生成代理类，其它的还需要手工编写实现类 -->
	  	<property name="markerInterface" value="com.web.core.util.NetStarDao" />
	  	<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	  	<property name="properties">
	  		<value>
	  			mappers=com.web.core.util.NetStarDao
	  			INDENTITY=MYSQL
	  		</value>
	  	</property>
	  </bean>
	  <!-- 通用mapper配置 -->
	  
	  <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	  <!-- 事务注解方式 -->
	  <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
	  <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	  </bean>
	  
	  <!-- 自定义Realm -->
	  <bean id="myRealm" class="com.web.core.realm.MyRealm"/>
	
	  <!-- 安全管理器 -->
	  <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">  
  	  	<property name="realm" ref="myRealm"/>  
	  </bean>
	
	  <!-- Shiro过滤器 -->
	  <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">  
	    <!-- Shiro的核心安全接口,这个属性是必须的 -->  
	    <property name="securityManager" ref="securityManager"/>
	    <!-- 身份认证失败，则跳转到登录页面的配置 -->  
	    <property name="loginUrl" value="/index.do"/>
	    <!-- 权限认证失败，则跳转到指定页面 -->  
	    <property name="unauthorizedUrl" value="/unauthor.do"/>  
	    <!-- Shiro连接约束配置,即过滤链的定义 -->  
	    <property name="filterChainDefinitions">  
	        <value>
	        	<!-- index不需要验证 -->
	        	/index=anon
	        	/css/**=anon
	        	/js/**=anon
	        	/ico/**=anon
	        	/assets/**=anon
	        	/vendor/**=anon
	        	/fonts/**=anon
	        	/images/**=anon
	        	/sys/**=roles[admin]
	        	/user/**=roles[admin]
	        	/user=perms["user:view"]
	        	<!-- 所有的都需要验证 -->
	        	<!-- /**=authc -->
	        </value>  
	    </property>
	</bean>
	  
	  <!-- 保证实现了Shiro内部lifecycle函数的bean执行 -->  
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>  
	
	<!-- 开启Shiro注解 -->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>  
	  	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">  
	  	<property name="securityManager" ref="securityManager"/>  
    </bean>  
	
	 <!-- 配置事务通知属性 -->  
     <tx:advice id="txAdvice" transaction-manager="transactionManager">  
        <!-- 定义事务传播属性 -->  
        <tx:attributes>  
            <tx:method name="insert*" propagation="REQUIRED" />  
            <tx:method name="update*" propagation="REQUIRED" />  
            <tx:method name="edit*" propagation="REQUIRED" />  
            <tx:method name="save*" propagation="REQUIRED" />  
            <tx:method name="add*" propagation="REQUIRED" />  
            <tx:method name="new*" propagation="REQUIRED" />  
            <tx:method name="set*" propagation="REQUIRED" />  
            <tx:method name="remove*" propagation="REQUIRED" />  
            <tx:method name="delete*" propagation="REQUIRED" />  
            <tx:method name="change*" propagation="REQUIRED" />  
            <tx:method name="check*" propagation="REQUIRED" />  
            <tx:method name="get*" propagation="REQUIRED" read-only="true" />  
            <tx:method name="find*" propagation="REQUIRED" read-only="true" />  
            <tx:method name="load*" propagation="REQUIRED" read-only="true" />  
            <tx:method name="*" propagation="REQUIRED" read-only="true" />  
        </tx:attributes>  
     </tx:advice>  
  
     <!-- 配置事务切面   -->
     <aop:config expose-proxy="true">  
        <aop:pointcut id="serviceOperation"  
            expression="execution(* com.web.service.*.*.*(..))" />  
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceOperation" />  
     </aop:config>
     
    <!-- 服务实现 
	<bean id="app" class="com.web.core.CorpApp" />-->
	
	<!-- file上传文件bean -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- set the max upload size100MB -->
		<property name="maxUploadSize">
			<value>104857600</value>
		</property>
		<property name="maxInMemorySize">
			<value>4096</value>
		</property>
	</bean>
	
</beans>